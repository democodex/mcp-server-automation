# Google Cloud Run Service Template for MCP Server Automation
# This template defines a complete Cloud Run service configuration
# Generated by MCP Server Automation CLI

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: "{{ service_name }}"
  namespace: "{{ project_id }}"
  labels:
    cloud.googleapis.com/location: "{{ region }}"
    run.googleapis.com/cpu-throttling: "false"
  annotations:
    # Cloud Run specific annotations
    run.googleapis.com/ingress: "{{ ingress | default('all') }}"
    run.googleapis.com/execution-environment: "gen2"
    {% if custom_domain %}
    run.googleapis.com/custom-audiences: "{{ custom_domain }}"
    {% endif %}

spec:
  template:
    metadata:
      labels:
        run.googleapis.com/startupProbeType: "Default"
      annotations:
        # Scaling configuration
        autoscaling.knative.dev/maxScale: "{{ max_instances | default(10) }}"
        autoscaling.knative.dev/minScale: "{{ min_instances | default(0) }}"

        # Resource allocation
        run.googleapis.com/cpu-throttling: "false"
        run.googleapis.com/memory: "{{ memory_limit | default('512Mi') }}"
        run.googleapis.com/cpu: "{{ cpu_limit | default('1000m') }}"

        # Networking
        {% if vpc_connector %}
        run.googleapis.com/vpc-access-connector: "{{ vpc_connector }}"
        run.googleapis.com/vpc-access-egress: "{{ vpc_egress | default('private-ranges-only') }}"
        {% endif %}

        # Concurrency and timeout
        run.googleapis.com/execution-environment: "gen2"

    spec:
      # Container concurrency (requests per instance)
      containerConcurrency: {{ container_concurrency | default(80) }}

      # Request timeout (max 3600 seconds for Cloud Run)
      timeoutSeconds: {{ timeout_seconds | default(300) }}

      containers:
      - name: "{{ service_name }}-container"
        image: "{{ image_url }}"

        ports:
        - name: http1
          containerPort: {{ port | default(8000) }}
          protocol: TCP

        env:
        # MCP Server Environment Variables
        - name: PORT
          value: "{{ port | default(8000) }}"
        - name: MCP_SERVER_NAME
          value: "{{ service_name }}"
        {% for env_key, env_value in environment_variables.items() %}
        - name: "{{ env_key }}"
          value: "{{ env_value }}"
        {% endfor %}

        # Health check configuration
        startupProbe:
          httpGet:
            path: /mcp
            port: {{ port | default(8000) }}
            httpHeaders:
            - name: User-Agent
              value: "GoogleCloudRun/HealthCheck"
          initialDelaySeconds: {{ startup_delay | default(5) }}
          timeoutSeconds: {{ startup_timeout | default(5) }}
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5

        livenessProbe:
          httpGet:
            path: /mcp
            port: {{ port | default(8000) }}
          initialDelaySeconds: {{ liveness_delay | default(30) }}
          timeoutSeconds: {{ liveness_timeout | default(5) }}
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3

        # Resource limits
        resources:
          limits:
            cpu: "{{ cpu_limit | default('1000m') }}"
            memory: "{{ memory_limit | default('512Mi') }}"
          requests:
            cpu: "{{ cpu_request | default('100m') }}"
            memory: "{{ memory_request | default('128Mi') }}"

      # Service account for authentication
      {% if service_account %}
      serviceAccountName: "{{ service_account }}"
      {% else %}
      serviceAccountName: "{{ project_id }}-compute@developer.gserviceaccount.com"
      {% endif %}

  traffic:
  # Traffic allocation (100% to latest revision by default)
  - percent: 100
    latestRevision: true

---
# Optional: IAM Policy to allow public access
{% if allow_unauthenticated %}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ service_name }}-iam-policy"
  namespace: "{{ project_id }}"
data:
  policy.json: |
    {
      "bindings": [
        {
          "role": "roles/run.invoker",
          "members": [
            "allUsers"
          ]
        }
      ]
    }
{% endif %}

---
# Optional: Custom Domain Mapping
{% if custom_domain %}
apiVersion: serving.knative.dev/v1alpha1
kind: DomainMapping
metadata:
  name: "{{ custom_domain }}"
  namespace: "{{ project_id }}"
  labels:
    cloud.googleapis.com/location: "{{ region }}"
spec:
  routeName: "{{ service_name }}"
  certificateMode: AUTOMATIC
{% endif %}